changes to original code for better Xplatform support

TYPES
UINT changed to GLuint for gl ints 
eg // VertexBufferObject.h
	GLuint m_uiVBO;									// VBO id
    
    WINDOWS C++ extensions
    
snprintf should be preferred over sprintf_s and family (which are windows-only)



I have added the following utility methods which behave differently in the different environments.

void errorMessage(const char* format, ...);
   use this whenever you want a MessageBox - (defaults with MB_ICONHAND)
   non-windows platforms will log an error message to STDOUT
   
std::string resourcePath(std::string fileName, std::string type, std::string subtype);
std::string resourceDirectory(std::string type, std::string subtype);
   use these whenever you need a path to a resource. 
   "type" and "subtype" are subfolders of the resources directory


typedefs for windows-specific types

typedef int UINT;
typedef unsigned char BYTE;
typedef signed char BOOL;

windows      posix
sprintf_s    snprintf


LINKS
http://solarianprogrammer.com/2013/05/10/opengl-101-windows-osx-linux-getting-started/


glLineWidth ignored??

why does this:
        viewPoint = thisPoint + nBinormal;
cause a crash?


platform selection via preprocessor macros
http://stackoverflow.com/questions/5919996/how-to-detect-reliably-mac-os-x-ios-linux-windows-in-c-preprocessor/5920028#5920028
http://stackoverflow.com/questions/6802903/c-ifdef-mac-os-x-question

#ifdef _WIN64
   //define something for Windows (64-bit)
#elif _WIN32
   //define something for Windows (32-bit & 64-bit)
#elif __APPLE__
    #include "TargetConditionals.h"
    #if TARGET_IPHONE_SIMULATOR
         // iOS Simulator
    #elif TARGET_OS_IPHONE
        // iOS device
    #elif TARGET_OS_MAC
        // Other kinds of Mac OS
    #else
        // Unsupported platform
    #endif
#elif __linux
    // linux
#elif __unix // all unices not caught above
    // Unix
#elif __posix
    // POSIX
#endif
